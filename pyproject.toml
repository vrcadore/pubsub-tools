[project]
name = "pubsub-tools"
version = "0.1.0"
description = "Pub/Sub helper tool"
authors = [{ name = "Vinicius Cadore", email = "vrcadore@gmail.com" }]
dependencies = [
    "wikipedia>=1.4.0",
    "google-cloud-pubsub>=2.13.10",
    "pandas>=1.5.1",
]
requires-python = ">=3.8"
readme = "README.md"
license = { text = "MIT" }
keywords = ["pubsub", "tools", "cli"]
classifiers = [
    "Topic :: Software Development :: Dev Tools",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

[project.urls]
Homepage = "https://pubsub-generator.viniciuscadore.com"
Repository = "https://github.com/pdm-project/pdm"
Documentation = "https://pubsub-generator.viniciuscadore.com"
Changelog = "https://pubsub-generator.viniciuscadore.com/latest/dev/changelog/"

[project.scripts]
pubsub-tools = "pubsub_tools.cli:main"

[project.optional-dependencies]
[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool]
[tool.pdm]
[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.1.3",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist>=1.31.0",
    "pytest-rerunfailures>=10.2",
]
tox = ["tox", "tox-pdm>=0.5"]
doc = [
    "mkdocs>=1.1",
    "mkdocs-material>=7.3",
    "mkdocstrings[python]>=0.18",
    "markdown-include>=0.5.1",
    "mike>=1.1.2",
    "setuptools>=62.3.3",
    "markdown-exec>=0.7.0",
    "mkdocs-click>=0.8.0",
    "pymdown-extensions>=9.7",
]
workflow = ["parver>=0.3.1", "towncrier>=20", "pycomplete~=0.3"]
dev = [
    "black>=22.10.0",
    "commitizen>=2.37.0",
]

[tool.pdm.build]
excludes = ["./**/.git"]
package-dir = "src"
includes = ["src/pubsub_tools"]
source-includes = ["tests", "CHANGELOG.md", "LICENSE", "README.md"]
editable-backend = "path"

[tool.pdm.scripts]
test = "pytest"
tox = "tox"
doc = { shell = "cd docs && mkdocs serve", help = "Start the dev server for doc preview" }
lint = "pre-commit run --all-files"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "src/pubsub_tools/__version__.py",
    "pyproject.toml:version",
    ".pre-commit-config.yaml:rev:.+Commitizen",
]
style = [
    [
        "qmark",
        "fg:#ff9d00 bold",
    ],
    [
        "question",
        "bold",
    ],
    [
        "answer",
        "fg:#ff9d00 bold",
    ],
    [
        "pointer",
        "fg:#ff9d00 bold",
    ],
    [
        "highlighted",
        "fg:#ff9d00 bold",
    ],
    [
        "selected",
        "fg:#cc5454",
    ],
    [
        "separator",
        "fg:#cc5454",
    ],
    [
        "instruction",
        "",
    ],
    [
        "text",
        "",
    ],
    [
        "disabled",
        "fg:#858585 italic",
    ],
]

[tool.black]
line-length = 88
exclude = '''
    /(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | tests/fixtures
    )/

'''

[tool.isort]
profile = "black"
atomic = true
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = ["pdm"]
known_third_party = [
    "platformdirs",
    "packaging",
    "pytest",
    "findpython",
    "tomlkit",
    "unearth",
    "requests",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
filterwarnings = "ignore::DeprecationWarning"
testpaths = ["tests/"]
markers = [
    "integration: Run with all Python versions",
    "path: Tests that compare with the system paths",
    "deprecated: Tests about deprecated features",
]

[tool.codespell]
ignore-words-list = "ba,overriden,te"

[tool.mypy]
exclude = ["pdm/(pep582/|models/in_process/.+\\.py)"]
follow_imports = "silent"
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
namespace_packages = true
mypy_path = "src"
explicit_package_bases = true

[tool.coverage]
[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]
omit = ['env/*', 'venv/*', '*/virtualenv/*', '*/virtualenvs/*', '*/tests/*']
